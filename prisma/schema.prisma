datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator python {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model SupabaseUserProfiles {
  id        String   @id @db.Uuid
  username  String?  @unique
  fullName  String?  @map("full_name")
  email     String?
  phone     String?
  avatarUrl String?  @map("avatar_url")
  website   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  settings  Settings @relation(fields: [id], references: [id])
  chats     Chats[]

  @@map("user_profiles")
}

model Settings {
  id                   String                @unique @db.Uuid
  name                 String?
  agentName            String?               @map("agent_name")
  gender               Gender?
  voice                Voice?
  user                 SupabaseUserProfiles?
  audioMessagesEnabled Boolean               @default(false) @map("audio_messages_enabled")

  @@map("settings")
}

model Chats {
  id              String               @id @default(uuid())
  created         DateTime             @default(now()) @map("created")
  modified        DateTime             @updatedAt @map("modified")
  lastMessageTime DateTime?            @map("last_message_time")
  userId          String               @map("user_id") @db.Uuid
  user            SupabaseUserProfiles @relation(fields: [userId], references: [id])
  messages        ChatMessages[]

  @@unique([id, userId])
  @@map("chats")
}

model ChatMessages {
  id          String      @id @default(uuid())
  created     DateTime    @default(now()) @map("created")
  modified    DateTime    @updatedAt @map("modified")
  chatId      String      @map("chat_id")
  content     String
  role        OpenAIRole
  chat        Chats       @relation(fields: [chatId], references: [id])
  displayType DisplayType @map("display_type")
  audioId     String?     @unique @map("audio_id")

  @@map("chat_messages")
}

enum DisplayType {
  text
  audio
}

enum OpenAIRole {
  system
  user
  assistant
}

enum Voice {
  voice_1 // todo - document specific voice name
  voice_2 // todo - document specific voice name
  voice_3 // todo - document specific voice name
  voice_4 // todo - document specific voice name
  voice_5 // todo - document specific voice name
  voice_6 // todo - document specific voice name
}

enum Gender {
  male
  female
  nonbinary
}
