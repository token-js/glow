datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator python {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model SupabaseUserProfiles {
  id        String   @id @db.Uuid
  username  String?  @unique
  fullName  String?  @map("full_name")
  email     String?
  phone     String?
  avatarUrl String?  @map("avatar_url")
  website   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  settings  Settings @relation(fields: [id], references: [id])
  chats     Chats[]

  @@map("user_profiles")
}

model Settings {
  id     String @unique @db.Uuid
  name   String?
  gender Gender?
  voice  Voice?
  user   SupabaseUserProfiles?

  @@map("settings")
}

model Chats {
  id               String               @id @default(cuid())
  created          DateTime             @default(now()) @map("created")
  modified         DateTime             @updatedAt @map("modified")
  lastMessageTime  DateTime             @map("last_message_time")
  userId           String               @db.Uuid @map("user_id")
  user             SupabaseUserProfiles @relation(fields: [userId], references: [id])
  messages         ChatMessages[]

  @@unique([id, userId])
  @@map("chats")
}

model ChatMessages {
  id       String     @id @default(cuid())
  created  DateTime   @default(now()) @map("created")
  modified DateTime   @updatedAt @map("modified")
  chatId   String     @map("chat_id")
  content  String
  role     OpenAIRole
  chat     Chats      @relation(fields: [chatId], references: [id])

  @@map("chat_messages")
}

enum OpenAIRole {
  system
  user
  assistant
}

enum Voice {
  voice_1
  voice_2
  voice_3
}

enum Gender {
  male
  female
  nonbinary
}