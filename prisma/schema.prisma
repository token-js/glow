datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator python {
  provider             = "prisma-client-py"
  recursive_type_depth = 5
}

model SupabaseUserProfiles {
  id        String   @id @db.Uuid
  username  String?  @unique
  fullName  String?  @map("full_name")
  email     String?
  phone     String?
  avatarUrl String?  @map("avatar_url")
  website   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  settings  Settings @relation(fields: [id], references: [id])
  chats     Chats[]

  @@map("user_profiles")
}

model Settings {
  id     String  @unique @db.Uuid
  name   String?
  agentName String? @map("agent_name")
  gender Gender?
  voice  Voice?
  user   SupabaseUserProfiles?

  @@map("settings")
}

model Chats {
  id              String               @id @default(uuid())
  created         DateTime             @default(now()) @map("created")
  modified        DateTime             @updatedAt @map("modified")
  lastMessageTime DateTime?            @map("last_message_time")
  userId          String               @db.Uuid @map("user_id")
  user            SupabaseUserProfiles @relation(fields: [userId], references: [id])
  messages        ChatMessages[]
  interactions    ChatInteractions[]   // Removed @relation name

  @@unique([id, userId])
  @@map("chats")
}

model ChatMessages {
  id                           String          @id
  created                      DateTime        @default(now()) @map("created")
  modified                     DateTime        @updatedAt @map("modified")
  chatId                       String          @map("chat_id")
  content                      String
  role                         OpenAIRole
  chat                         Chats           @relation(fields: [chatId], references: [id])

  // Relations with ChatInteractions
  chatInteractionsMessages     ChatInteractions[]
  chatInteractionsAssistantResponse ChatInteractions? @relation("ChatInteractionsAssistantResponse")

  @@map("chat_messages")
}

// TODO(later): when you're fetching the memories from Mem0, make sure that you get the memory
// string that corresponds to the time that the chat interaction was created, since memories in Mem0
// are mutable. You may need to use `mem0.history`.

model ChatInteractions {
  id              String         @id @default(uuid())
  created         DateTime       @default(now())
  modified        DateTime       @updatedAt
  aiName          String         @map("ai_name")
  userName        String         @map("user_name")
  userGender      Gender         @map("user_gender")
  timezone        String
  systemPrompt    String         @map("system_prompt")
  memoryIds       String[]       @map("memory_ids")
  preferenceIds   String[]       @map("preference_ids")

  // Relation to Chats
  chatId          String         @map("chat_id")
  chat            Chats          @relation(fields: [chatId], references: [id])

  // Relations to ChatMessages
  messages        ChatMessages[]
  assistantResponseId String         @unique @map("assistant_response_id")
  assistantResponse   ChatMessages   @relation("ChatInteractionsAssistantResponse", fields: [assistantResponseId], references: [id])

  @@map("chat_interactions")
}

enum OpenAIRole {
  system
  user
  assistant
}

enum Voice {
  voice_1 // todo - document specific voice name
  voice_2 // todo - document specific voice name
  voice_3 // todo - document specific voice name
  voice_4 // todo - document specific voice name
  voice_5 // todo - document specific voice name
  voice_6 // todo - document specific voice name
}

enum Gender {
  male
  female
  nonbinary
}